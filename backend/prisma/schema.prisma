generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String          @id @default(cuid())
  email     String          @unique
  fullName  String?
  cognitoId String          @unique @map("cognito_id")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  members   ProjectMember[]

  @@map("users")
}

model Project {
  id           String          @id @default(cuid())
  name         String
  client       String?
  startDate    DateTime        @map("start_date")
  endDate      DateTime        @map("end_date")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  budgetRollup Decimal         @default(0) @db.Money
  budget       Decimal?        @db.Money
  members      ProjectMember[]
  tasks        Task[]

  @@map("projects")
}

model Task {
  id               String           @id @default(cuid())
  projectId        String           @map("project_id")
  parentId         String?          @map("parent_id")
  level            Int              @default(0)
  wbsCode          String           @map("wbs_code")
  title            String
  description      String?
  startDate        DateTime         @map("start_date")
  endDate          DateTime         @map("end_date")
  isMilestone      Boolean          @default(false) @map("is_milestone")
  isManualFinish   Boolean          @default(false) @map("is_manual_finish")
  manualFinishDate DateTime?        @map("manual_finish_date")
  resourceRole     String?          @map("resource_role")
  resourceQty      Float?           @map("resource_qty")
  resourceUnit     String?          @map("resource_unit")
  roleHours        Json?            @map("role_hours")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  totalCost        Decimal          @default(0) @map("total_cost") @db.Money
  costLabor        Decimal          @default(0) @map("cost_labor") @db.Money
  costMaterial     Decimal          @default(0) @map("cost_material") @db.Money
  costOther        Decimal          @default(0) @map("cost_other") @db.Money
  activityId       String           @unique @map("activity_id")
  successors       TaskRelation[]   @relation("successors")
  predecessors     TaskRelation[]   @relation("predecessors")
  parent           Task?            @relation("TaskHierarchy", fields: [parentId], references: [id])
  children         Task[]           @relation("TaskHierarchy")
  project          Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  dependenciesFrom TaskDependency[]    @relation("DependencyPredecessor")
  dependenciesTo   TaskDependency[]    @relation("DependencySuccessor")
  resourceAssignments ResourceAssignment[]

  @@unique([projectId, wbsCode])
  @@index([projectId])
  @@index([parentId])
  @@index([projectId, parentId])
  @@index([projectId, level])
  @@index([projectId, wbsCode])
  @@map("tasks")
}

model TaskRelation {
  id            String       @id @default(cuid())
  predecessorId String       @map("predecessor_id")
  successorId   String       @map("successor_id")
  type          RelationType
  lag           Float
  createdAt     DateTime     @default(now()) @map("created_at")
  predecessor   Task         @relation("successors", fields: [predecessorId], references: [id], onDelete: Cascade)
  successor     Task         @relation("predecessors", fields: [successorId], references: [id], onDelete: Cascade)

  @@unique([predecessorId, successorId])
  @@map("task_relations")
}

model ProjectMember {
  id        String     @id @default(cuid())
  userId    String     @map("user_id")
  projectId String     @map("project_id")
  role      MemberRole
  createdAt DateTime   @default(now()) @map("created_at")
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@map("project_members")
}

model TaskDependency {
  id            String         @id @default(cuid())
  predecessorId String         @map("predecessor_id")
  successorId   String         @map("successor_id")
  type          DependencyType
  lag           Int            @default(0) // Signed integer for days (can be negative)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  predecessor   Task           @relation("DependencyPredecessor", fields: [predecessorId], references: [id], onDelete: Cascade)
  successor     Task           @relation("DependencySuccessor", fields: [successorId], references: [id], onDelete: Cascade)

  @@unique([predecessorId, successorId])
  @@index([predecessorId])
  @@index([successorId])
  @@map("task_dependencies")
}

model ResourceType {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  resources Resource[]

  @@map("resource_types")
}

model Resource {
  id          String               @id @default(cuid())
  name        String
  rateFloat   Float                @map("rate_float")
  typeId      String               @map("type_id")
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  type        ResourceType         @relation(fields: [typeId], references: [id], onDelete: Cascade)
  assignments ResourceAssignment[]

  @@index([typeId])
  @@map("resources")
}

model ResourceAssignment {
  id         String   @id @default(cuid())
  taskId     String   @map("task_id")
  resourceId String   @map("resource_id")
  hours      Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([taskId, resourceId])
  @@index([taskId])
  @@index([resourceId])
  @@map("resource_assignments")
}

enum RelationType {
  FS
  SS
  FF
  SF
}

enum DependencyType {
  FS // Finish-to-Start
  SS // Start-to-Start
  FF // Finish-to-Finish
  SF // Start-to-Finish
}

enum MemberRole {
  ADMIN
  PM
  VIEWER
  OWNER
}
